jr 2             // jump to the address 2
jr 3             // jump 3 words
jrl -1           // link the value 3 in lk and jump to 1
lsi &0, -7
lli &0, 8        // load 8 in ac0
mfac $0, &0      // move 8 to rf0
ja $0            // jump to the address 8 in rf0
lsi &0, -7
lli &1, 12       // load 12 in ac1
mfac $1, &1      // move 12 to rf1
jal $1           // link the value 15 in lk and jump to the address 12 in rf0
lsi &0, -7
lsi &1, 5        // load 5 in ac1
bgtz &1, 1       // jump to the address 15 if ac1 is greater than 0
lsi &0, -7
lsi &1, -2       // load -2 in ac1
bltz &1, 1       // jump to the address 18 if ac1 is less than 0
lsi &0, -7
lsi &1, 0        // load 0 in ac1
beqz &1, 1       // jump to the address 21 if ac1 is equal to 0
lsi &0, -7
lli &1, 1        // load 1 in ac0
bnez &1, 1       // jump to the address 24 if ac0 is not equal to 0
lsi &0, -7
lli &0, 38       // load 0 in ac0
lli &1, 40       // load 0 in ac1
lli &2, 42       // load 0 in ac2
lli &3, 44       // load 0 in ac3
mfac $0, &0      // move 12 to rf0
mfac $1, &1      // move 12 to rf1
mfac $2, &2      // move 12 to rf2
mfac $3, &3      // move 12 to rf3
lsi &0, 1        // load 1 in ac0
lsi &1, -2       // load -2 in ac1
lsi &2, 0        // load 0 in ac2
lsi &3, 1        // load 1 in ac3
bgtzr &0, $0     // jump to the address 38 if ac0 is greater than 0
lsi &0, -7
bltzr &1, $1     // jump to the address 40 if ac1 is less than 0
lsi &0, -7
beqzr &2, $2     // jump to the address 42 if ac2 is equal to 0
lsi &0, -7
bnezr &3, $3     // jump to the address 44 if ac3 is not equal to 0
lsi &0, -7
lli &0, 20       // load 20 in ac0
